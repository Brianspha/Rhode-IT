using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace RhodeIT.Helpers
{
    /// <summary>
    /// @dev responsible for configuring communication with local blockchain node
    /// </summary>
    public class SmartContractHelper
    {
        public string senderAddress = "0xCbE8dc6Ce1014814F3f602e2cDE4035E0B6bd37D";
        public string password = "password";
        public string abi = @"[{'constant':false,'inputs':[{'name':'studentNo','type':'string'},{'name':'pass','type':'string'}],'name':'addUser','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'name':'name','type':'string'},{'name':'lat','type':'uint256'},{'name':'latp2','type':'uint256'},{'name':'long','type':'uint256'},{'name':'longp2','type':'uint256'}],'name':'registerDockingStation','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':true,'inputs':[{'name':'name','type':'string'}],'name':'DockingStationExists','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'view','type':'function'},{'constant':true,'inputs':[{'name':'studentNo','type':'string'}],'name':'userExists','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'view','type':'function'},{'inputs':[],'payable':false,'stateMutability':'nonpayable','type':'constructor'}]";
        public string byteCode = @"0x6080604052600060025534801561001557600080fd5b5033151561002257600080fd5b60048054600160a060020a031916331790556107ec806100436000396000f3006080604052600436106100615763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663079eaf3481146100665780636b3ef0f114610111578063ef4162161461017c578063fddc968e146101d5575b600080fd5b34801561007257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061022e9650505050505050565b604080519115158252519081900360200190f35b34801561011d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd943694929360249392840191908190840183828082843750949750508435955050506020830135926040810135925060600135905061038d565b34801561018857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd94369492936024939284019190819084018382808284375094975061053c9650505050505050565b3480156101e157600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd9436949293602493928401919081908401838280828437509497506106019650505050505050565b60003315156102ad576040805160e560020a62461bcd02815260206004820152602a60248201527f496e76616c69642073656e646572206164647265737320696e2061646455736560448201527f722066756e6374696f6e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b60806040519081016040528084815260200183815260200160008152602001600115158152506000846040518082805190602001908083835b602083106103055780518252601f1990920191602091820191016102e6565b51815160209384036101000a6000190180199092169116179052920194855250604051938490038101909320845180519194610346945085935001906106ec565b50602082810151805161035f92600185019201906106ec565b50604082015160028201556060909101516003909101805460ff191691151591909117905550600192915050565b600061039761076a565b3315156103ee576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b60c06040519081016040528088815260200187815260200186815260200185815260200184815260200160011515815250905060606040519081016040528082815260200160008152602001600115158152506001886040518082805190602001908083835b602083106104735780518252601f199092019160209182019101610454565b51815160209384036101000a600019018019909216911617905292019485525060405193849003810190932084518051805192959194508593506104bd92849291909101906106ec565b50602082810151600180840191909155604080850151600280860191909155606086015160038601556080860151600486015560a0909501516005909401805494151560ff1995861617905591860151600686015594015160089093018054931515939091169290921790915580548201905591505095945050505050565b6000331515610595576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b6001826040518082805190602001908083835b602083106105c75780518252601f1990920191602091820191016105a8565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206008015460ff16949350505050565b6000331515610680576040805160e560020a62461bcd02815260206004820152602a60248201527f496e76616c69642073656e646572206164647265737320696e2066756e63746960448201527f6f6e206765745573657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000826040518082805190602001908083835b602083106106b25780518252601f199092019160209182019101610693565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092206003015460ff16949350505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061072d57805160ff191683800117855561075a565b8280016001018555821561075a579182015b8281111561075a57825182559160200191906001019061073f565b506107669291506107a3565b5090565b60c06040519081016040528060608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b6107bd91905b8082111561076657600081556001016107a9565b905600a165627a7a723058203599d24bccb2578855f71a3a35f22e436f42b079e17fa9f0c2e7119956aa78d50029";
        public Web3 web3 = new Web3("http://146.231.123.144:7545");
        public TransactionReceipt Receipt { get; private set; }
        bool unlockAccountResult = false;
        string transactionHash = "";
        public SmartContractHelper()
        {
            setup().Wait();
        }
        /// <summary>
        /// @dev since i cant call async functions within the constructor this method servers as an intermediary for calling the async function
        /// </summary>
        public async Task setup()
        {
            await setUpAsync();
        }
        private async Task setUpAsync()
        {
            transactionHash = await web3.Eth.DeployContract.SendRequestAsync(byteCode, senderAddress);
            Receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            while (Receipt == null)
            {
                Thread.Sleep(5000);
                Receipt = await web3.Eth.Transactions.GetTransactionReceipt.SendRequestAsync(transactionHash);
            }
            web3.TransactionManager.DefaultGas = new System.Numerics.BigInteger(10000000);
            web3.TransactionManager.DefaultGasPrice = new System.Numerics.BigInteger(20000000000);
            unlockAccountResult = await web3.Personal.UnlockAccount.SendRequestAsync(senderAddress, password, 120);
        }
    }
 }
