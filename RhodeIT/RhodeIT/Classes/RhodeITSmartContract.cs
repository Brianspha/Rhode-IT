using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Nethereum.Contracts;
using Nethereum.Hex.HexTypes;
using Nethereum.RPC.Eth.DTOs;
using Nethereum.Web3;
using Newtonsoft.Json.Linq;
using RhodeIT.Databases;
using RhodeIT.Helpers;
using RhodeIT.Models;
using Syncfusion.XForms.PopupLayout;
using Xamarin.Forms;

namespace RhodeIT.Classes
{
    /// <summary>
    /// @dev responsible for communicating with RhodeIT smart contract
    /// </summary>
    public sealed class RhodeITSmartContract
    {
        RhodeITDB db;
        public string senderAddress = "0xb8C8316D7a3B401a835461C0AaF926C0caF5eF89";
        public string password = "password";
        public string abi = @"[{'constant':false,'inputs':[{'name':'studentNo','type':'string'},{'name':'pass','type':'string'}],'name':'addUser','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'name':'name','type':'string'},{'name':'latitude','type':'string'},{'name':'longitude','type':'string'}],'name':'DockingStationExists','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'name':'name','type':'string'},{'name':'latitude','type':'string'},{'name':'longitude','type':'string'}],'name':'registerDockingStation','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'constant':false,'inputs':[{'name':'studentNo','type':'string'}],'name':'userExists','outputs':[{'name':'','type':'bool'}],'payable':false,'stateMutability':'nonpayable','type':'function'},{'inputs':[],'payable':false,'stateMutability':'nonpayable','type':'constructor'},{'anonymous':false,'inputs':[{'indexed':true,'name':'tHash','type':'bytes32'},{'indexed':true,'name':'results','type':'bool'}],'name':'addUserLogger','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'tHash','type':'bytes32'},{'indexed':true,'name':'results','type':'bool'}],'name':'userExistsLogger','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'tHash','type':'bytes32'},{'indexed':true,'name':'results','type':'bool'}],'name':'addDockingStationLogger','type':'event'},{'anonymous':false,'inputs':[{'indexed':true,'name':'tHash','type':'bytes32'},{'indexed':true,'name':'results','type':'bool'}],'name':'dockingStationExistsLogger','type':'event'}]";
        public string byteCode = @"0x6080604052600060025534801561001557600080fd5b5033151561002257600080fd5b60048054600160a060020a03191633179055610d57806100436000396000f3006080604052600436106100615763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663079eaf348114610066578063247ea4c314610111578063ab84f853146101e6578063fddc968e146102bb575b600080fd5b34801561007257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506103149650505050505050565b604080519115158252519081900360200190f35b34801561011d57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061063c9650505050505050565b3480156101f257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975061089e9650505050505050565b3480156102c757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fd943694929360249392840191908190840183828082843750949750610b5d9650505050505050565b60008080331515610395576040805160e560020a62461bcd02815260206004820152602a60248201527f496e76616c69642073656e646572206164647265737320696e2061646455736560448201527f722066756e6374696f6e00000000000000000000000000000000000000000000606482015290519081900360840190fd5b8484604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b838110156103db5781810151838201526020016103c3565b50505050905090810190601f1680156104085780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561043b578181015183820152602001610423565b50505050905090810190601f1680156104685780820380516001836020036101000a031916815260200191505b509450505050506040516020818303038152906040526040518082805190602001908083835b602083106104ad5780518252601f19909201916020918201910161048e565b51815160001960209485036101000a01908116901991909116179052604080519490920184900384208482018281528c51938601939093528b519098508b96509194508493606001925085019080838360005b83811015610518578181015183820152602001610500565b50505050905090810190601f1680156105455780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040526040518082805190602001908083835b602083106105885780518252601f199092019160209182019101610569565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206080830185528083528282018981526000848701818152600160608701818152858452958390528883209651875592518684015551600286015592516003909401805460ff19169415159490941790935593519396509094508693507fdb7f1efb512f11c37a94e949f10f95b9a0aa4afd3208582990cf309ea5d955a492909150a3506001949350505050565b600080331515610696576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b84848460405160200180806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156106e15781810151838201526020016106c9565b50505050905090810190601f16801561070e5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015610741578181015183820152602001610729565b50505050905090810190601f16801561076e5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b838110156107a1578181015183820152602001610789565b50505050905090810190601f1680156107ce5780820380516001836020036101000a031916815260200191505b5096505050505050506040516020818303038152906040526040518082805190602001908083835b602083106108155780518252601f1990920191602091820191016107f6565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600081815260019092529381206004015493965060ff909316151594508593507f01f7d835fdb9103a5845558e86fdb4c9aab90b37782d8e165e7c88fad1520a95929150a360009081526001602052604090206004015460ff16949350505050565b6000806108a9610d14565b331515610900576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015290519081900360640190fd5b85858560405160200180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561094b578181015183820152602001610933565b50505050905090810190601f1680156109785780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156109ab578181015183820152602001610993565b50505050905090810190601f1680156109d85780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b83811015610a0b5781810151838201526020016109f3565b50505050905090810190601f168015610a385780820380516001836020036101000a031916815260200191505b5096505050505050506040516020818303038152906040526040518082805190602001908083835b60208310610a7f5780518252601f199092019160209182019101610a60565b51815160209384036101000a600019018019909216911617905260408051929094018290038220828501855280835260018383018190528551606081018752848152600081850181815282890184815285835284875289832093518051855590960151838501805460ff199081169215159290921790559051600280850191909155955160049093018054909116921515929092179091558354820190935594519098509196509294508693507ff54e9050e78072cbca4c00087fe235c1f78c4b9395199fb2a15f0e68009b4a09929150a350600195945050505050565b600080331515610bdd576040805160e560020a62461bcd02815260206004820152602a60248201527f496e76616c69642073656e646572206164647265737320696e2066756e63746960448201527f6f6e206765745573657200000000000000000000000000000000000000000000606482015290519081900360840190fd5b826040516020018080602001828103825283818151815260200191508051906020019080838360005b83811015610c1e578181015183820152602001610c06565b50505050905090810190601f168015610c4b5780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040526040518082805190602001908083835b60208310610c8e5780518252601f199092019160209182019101610c6f565b51815160209384036101000a6000190180199092169116179052604080519290940182900382206000818152918290529381206003015493965060ff909316151594508593507fc3e6abf1d532c0111323365940fc24325eccea2b847f18131210e6838e5cc93e929150a360009081526020819052604090206003015460ff1692915050565b6040805180820190915260008082526020820152905600a165627a7a72305820169a92ecf190cba6976888e93a2d7918ecf52ac12f292437b677da7cbdff0a9a0029";
        public Web3 web3 = new Web3("http://146.231.123.137:11000");
        public TransactionReceipt Receipt { get; private set; }
        bool unlockAccountResult { get; set; }
        string transactionHash { get; set; }
        Contract Contract { get; set; }
        string contractAddress = "0xd5c990b07c049da0ec18db5ae8c3753e629d6bf6";
        HexBigInteger gasLimit { get; set; }
        HexBigInteger gasPrice { get; set; }
        HexBigInteger Ether { get; set; }
       
        public RhodeITSmartContract()
        {
            db = new RhodeITDB();
            Setup();
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        }
        public void Setup()
        {
            web3.TransactionManager.DefaultGas = new System.Numerics.BigInteger(10000000);
            web3.TransactionManager.DefaultGasPrice = new System.Numerics.BigInteger(20000000000);
            Contract = web3.Eth.GetContract(abi,contractAddress);

        }
        /// <summary>
        /// @dev function that allows user to login this function also adds users to the smartcontracts storage users dont not need to register university credentials will be sufficient
        /// </summary>
        /// <param name="sn">student number</param>
        /// <param name="pass">password</param>
        /// <returns>if the login was succefull or not</returns>
        public async Task<bool> Login(string sn, string pass)
        {
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
            sn = sn.ToLower();
            bool added = false;
            string Thash = "";
            var userExistsEvent = Contract.GetEvent("userExistsLogger");
            var addUser = Contract.GetFunction("addUser");
            var userExists = Contract.GetFunction("userExists");
            var exists = await userExists.CallAsync<bool>(sn);//@dev we interested in the latest event which is why we grabbing at index -1
            if (!exists)
            {
                var send = await addUser.SendTransactionAsync(senderAddress,  new object[] { new string(sn.ToCharArray()), new string(pass.ToCharArray()) });
                var addUserEventHandler = web3.Eth.GetEvent<AddUserLogger>(contractAddress);
                var filterAlladdUserForContract = addUserEventHandler.CreateFilterInput();
                var alladdUserEvents = await addUserEventHandler.GetAllChanges(filterAlladdUserForContract);
                added = alladdUserEvents[alladdUserEvents.Count - 1].Event.Results;//@dev we interested in the latest event which is why we grabbing at index -1
                Console.WriteLine("Returned from adding user: ", send);
                added = true;
                Thash = send;

            }
            db.Login(new LoginDetails { userID = sn, password =password ,TransactionHash=Thash});
            return added;
        }
        public async Task<bool> registerDockingStation(List<VenueLocation> venues)
        {

            bool added = false;
            foreach (var venue in venues)
            {
                Console.WriteLine("Did we add DockingStation: ", venue.Name, "Success: ", added);

                var registerDockingStation = Contract.GetFunction("registerDockingStation");
                var DockingStationExists = Contract.GetFunction("DockingStationExists");
                //var dockingStationExitsEventHandler = web3.Eth.GetEvent<DockingStationExistsLogger>();
                var result = await DockingStationExists.CallAsync<bool>(venue.Name,venue.Lat,venue.Long);
                //var filterforDockingStationExist = dockingStationExitsEventHandler.CreateFilterInput();
                //var allEventsForDockingStationExists = await dockingStationExitsEventHandler.GetAllChanges(filterforDockingStationExist);
                //var results = allEventsForDockingStationExists[allEventsForDockingStationExists.Count - 1];
                if (!result)
                {
                    var send = await registerDockingStation.SendTransactionAndWaitForReceiptAsync(senderAddress, default, new object[] { venue.Name, venue.Lat.ToString(), venue.Long.ToString() });
                    var registerDockingStationEventHandler = web3.Eth.GetEvent<AddDockingStationLogger>();
                    var filterAlladdDockingStationEventsForContract = registerDockingStationEventHandler.CreateFilterInput();
                    var alladdDockingStationsEvents = await registerDockingStationEventHandler.GetAllChanges(filterAlladdDockingStationEventsForContract);
                    added = alladdDockingStationsEvents[alladdDockingStationsEvents.Count - 1].Event.Results;
                    Console.WriteLine("Returned from adding user: ", added);
                }
            }
            return added;
        }


    }
}
